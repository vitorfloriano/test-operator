name: Alpha Update

permissions:
  contents: write
  issues: write
  pull-requests: write
  models: read

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 2" # Every Tuesday at 00:00 UTC

jobs:
  alpha-update:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: kubebuilder-alpha-update-${{ github.run_number }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Extract current version
      id: current-version
      run: |
        if [ ! -f "PROJECT" ]; then
          echo "PROJECT file not found"
          exit 1
        fi

        cliversion=$(grep -Eo 'cliVersion:\s*v?[0-9]+\.[0-9]+\.[0-9]+' PROJECT)
        current_version=$(echo "$cliversion" | awk '{print $2}' | sed 's/^v//')

        if [ -z "$current_version" ]; then
          echo "cliVersion not found or invalid in PROJECT"
          exit 1
        fi

        echo "Current Kubebuilder version: v$current_version"
        echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

    - name: Fetch latest version
      id: latest-version
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        latest_version=$(gh api repos/kubernetes-sigs/kubebuilder/releases/latest -q .tag_name | sed 's/^v//')
        echo "Latest Kubebuilder version: v$latest_version"
        echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"

    - name: Compare versions
      id: version-check
      run: |
        current="${{ steps.current-version.outputs.current_version }}"
        latest="${{ steps.latest-version.outputs.latest_version }}"
        [ -z "$current" ] && { echo "current missing"; exit 1; }
        [ -z "$latest" ]  && { echo "latest missing"; exit 1; }

        if [ "$(printf '%s\n%s\n' "$current" "$latest" | sort -V | tail -1)" != "$current" ]; then
          echo "Update needed - $current < $latest"
          echo "update_needed=true" >> "$GITHUB_OUTPUT"
        else
          echo "No update needed - $current >= $latest"
          echo "update_needed=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    - name: Install Kubebuilder
      run: |
        curl -L -o kubebuilder \
          "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${{ steps.latest-version.outputs.latest_version }}/kubebuilder_$(go env GOOS)_$(go env GOARCH)"
        chmod +x kubebuilder
        sudo mv kubebuilder /usr/local/bin/
        echo "Kubebuilder installed successfully"
        kubebuilder version

    - name: Save base commit
      id: base
      run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

    - name: Run kubebuilder alpha update
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        echo "Running kubebuilder alpha update"
        echo "From version v${{ steps.current-version.outputs.current_version }}"
        echo "To version v${{ steps.latest-version.outputs.latest_version }}"
        kubebuilder alpha update \
          --from-version v${{ steps.current-version.outputs.current_version }} \
          --to-version v${{ steps.latest-version.outputs.latest_version }} \
          --force

    - name: Restore workflows directory
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        git restore --source=${{ steps.base.outputs.sha }} \
          --staged --worktree .github/workflows || true

    - name: Soft reset to base and checkout main at base commit
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        git reset --soft ${{ steps.base.outputs.sha }}
        git checkout -B main ${{ steps.base.outputs.sha }}

    # ---------- AI-generated PR body ----------
    - name: Create compact patch
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        git diff --unified=0 --no-color > update.patch || true
        head -c 200000 update.patch > update.patch.trim

    - name: Prepare prompt for PR body
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        cat > prompt.txt <<'EOF'
        You are a release-notes assistant.
        Task: Read the unified diff and write a concise PR description in Markdown.

        Context:
        - Change type: Kubebuilder alpha update
        - From: ${FROM_VERSION}
        - To:   ${TO_VERSION}

        Requirements:
        - 200â€“300 words max.
        - A short intro line (what & why).
        - Bulleted highlights of notable changes (group by folder when possible).
        - If conflict markers appear in files (e.g., <<<<<<<), add a "Conflicts" note.
        - Add a checklist:
          - [ ] Build passes
          - [ ] Unit tests pass
          - [ ] E2E (if applicable)

        Do NOT include the raw diff. Output Markdown only.
        ---- DIFF BELOW ----
        EOF

        sed -i "s|\${FROM_VERSION}|v${{ steps.current-version.outputs.current_version }}|g" prompt.txt
        sed -i "s|\${TO_VERSION}|v${{ steps.latest-version.outputs.latest_version }}|g" prompt.txt
        cat update.patch.trim >> prompt.txt

    - name: Generate PR body with GitHub Models
      if: steps.version-check.outputs.update_needed == 'true'
      env:
        GITHUB_TOKEN: ${{ github.token }}
        MODEL_ID: openai/gpt-4o-mini
      run: |
        # Build request JSON from raw text file
        jq -Rn --rawfile prompt prompt.txt '{
          "model": env.MODEL_ID,
          "messages": [{"role":"user","content": $prompt}],
          "max_tokens": 700,
          "temperature": 0.2
        }' > req.json

        # Call Models API (note the backslashes and Bearer token)
        curl -sS "https://models.github.ai/inference/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          --data @req.json \
          -o resp.json

        # Extract content
        body=$(jq -r '.choices[0].message.content // empty' resp.json)
        if [ -z "$body" ]; then
          echo "Model returned empty body; using fallback."
          body="Automated Kubebuilder update from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}. Please review the diff."
        fi
        printf "%s\n" "$body" > PR_BODY.md

    # ---------- /AI-generated PR body ----------

    - name: Detect changes
      id: changes
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        if git diff --staged --quiet && git diff --quiet; then
          echo "has_changes=false" >> "$GITHUB_OUTPUT"
          echo "No changes to commit."
        else
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Create PR with peter-evans
      id: cpr
      if: steps.version-check.outputs.update_needed == 'true' && steps.changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v7.0.8
      continue-on-error: true
      with:
        branch: ${{ env.BRANCH_NAME }}
        commit-message: |
          chore: update Kubebuilder scaffold from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}

          Automated update via workflow.
        title: "chore: update Kubebuilder scaffold"
        body-path: PR_BODY.md
        draft: true

    - name: Log PR result
      if: steps.version-check.outputs.update_needed == 'true' && steps.changes.outputs.has_changes == 'true'
      run: |
        if [ -n "${{ steps.cpr.outputs.pull-request-url }}" ]; then
          echo "PR: ${{ steps.cpr.outputs.pull-request-url }}"
        else
          echo "No PR created (no changes or action failed)."
        fi

    - name: Prepare issue body (fallback)
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url)
      run: |
        cat > issue_body.md <<EOF
        ## Kubebuilder update needed

        Automated PR failed this run.

        **Current:** v${{ steps.current-version.outputs.current_version }}
        **Latest:** v${{ steps.latest-version.outputs.latest_version }}

        Open a PR manually from this branch:
        https://github.com/${{ github.repository }}/pull/new/${{ env.BRANCH_NAME }}

        _This issue was created by the Alpha Update workflow._
        EOF
        # Optionally append the model output for context
        if [ -f PR_BODY.md ]; then
          { echo; echo "----"; echo; cat PR_BODY.md; } >> issue_body.md
        fi

    - name: Find existing update issue
      id: find-issue
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        num=$(gh issue list --state open \
          --search "in:title Update Kubebuilder from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}" \
          --json number --jq '.[0].number')
        echo "number=$num" >> "$GITHUB_OUTPUT"

    - name: Create issue (fallback)
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url) && steps.find-issue.outputs.number == ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue create \
          --title "Update Kubebuilder from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}" \
          --body-file issue_body.md

    - name: Update existing issue (fallback)
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url) && steps.find-issue.outputs.number != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue edit ${{ steps.find-issue.outputs.number }} \
          --title "Update Kubebuilder from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}" \
          --body-file issue_body.md
