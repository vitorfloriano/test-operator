name: Alpha Update

permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 2" # Every Tuesday at 00:00 UTC

jobs:
  alpha-update:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    - name: Configure Git
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

    - name: Install Kubebuilder
      run: |
        git clone --depth 1 --branch master \
          https://github.com/kubernetes-sigs/kubebuilder.git /tmp/kubebuilder
        cd /tmp/kubebuilder
        make build
        sudo cp bin/kubebuilder /usr/local/bin/
        kubebuilder version

    - name: Run kubebuilder alpha update
      run: |
        kubebuilder alpha update \
          --force \
          --restore-path .github/workflows \
          --push \
          --open-gh-issue

    - name: Grace period for issue creation
      run: |
        echo "[update] Waiting briefly for GitHub to index the new issue…"
        sleep 10

    - name: Determine update issue number
      id: find-issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        echo "[find-issue] Searching for latest Kubebuilder update issue…"
        issue_number=""
        for i in $(seq 1 18); do
          echo "[find-issue] Attempt $i"
          # Prefer Search API (fast, server-side sorted)
          issue_number=$(timeout 20s gh api search/issues \
            -f q="repo:${GITHUB_REPOSITORY} is:issue is:open in:title \"update kubebuilder from version\"" \
            -f sort=created -f order=desc -f per_page=1 \
            --jq '.items[0].number // empty' || true)

          # Fallback to issues list with regex match on title
          if [ -z "$issue_number" ]; then
            issue_number=$(timeout 20s gh api "repos/${GITHUB_REPOSITORY}/issues" -X GET \
              -f state=open -f per_page=100 \
              --jq 'map(select(.title|test("^update kubebuilder from version v[0-9.]+ to version v[0-9.]+$"))) 
                    | sort_by(.created_at) | last.number // empty' || true)
          fi

          if [ -n "$issue_number" ]; then
            echo "[find-issue] Found issue #$issue_number"
            break
          fi
          echo "[find-issue] Not found yet; sleeping 5s"
          sleep 5
        done

        if [ -z "${issue_number}" ]; then
          echo "[find-issue] No matching issue found after waiting; skipping AI comment."
        fi
        echo "issue_number=${issue_number}" >> "$GITHUB_OUTPUT"

    - name: Create compact patch of last commit
      if: steps.find-issue.outputs.issue_number != ''
      run: |
        set -euo pipefail
        echo "[patch] Current branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "[patch] Capturing last commit diff (u=0)…"
        git show --no-color --unified=0 --pretty=format: --no-renames HEAD > update.patch
        head -c 200000 update.patch > update.patch.trim
        echo "[patch] Patch size bytes: $(wc -c < update.patch.trim)"

    - name: Prepare model prompt
      if: steps.find-issue.outputs.issue_number != ''
      run: |
        set -euo pipefail
        echo "[prompt] Building prompt file"
        cat > prompt.txt <<'EOF'
        You are a concise change summarization assistant.

        Task:
        Summarize the provided unified diff (single commit from an automated Kubebuilder alpha scaffold update) for a GitHub issue comment.

        Include:
        1. One-line overview (what & why).
        2. Bullet list of notable changes grouped roughly by directory or concern.
        3. Note any occurrences of conflict markers if present (e.g., <<<<<<<).
        4. Quick checklist:
           - [ ] Build & generate succeed
           - [ ] Tests pass
           - [ ] Manual review of CRD / RBAC changes
        5. Keep <= 170 words. No raw diff. Markdown only.

        ---- DIFF BELOW ----
        EOF
        cat update.patch.trim >> prompt.txt
        echo "[prompt] Prompt chars: $(wc -c < prompt.txt)"

    - name: Generate summary with GitHub Models
      id: model
      if: steps.find-issue.outputs.issue_number != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MODEL_ID: openai/gpt-4o-mini
      run: |
        set -euo pipefail
        echo "[model] Creating request JSON"
        jq -Rn --rawfile prompt prompt.txt '{
          model: env.MODEL_ID,
          messages: [{role:"user", content:$prompt}],
          max_tokens: 500,
          temperature: 0.2
        }' > req.json
        echo "[model] Calling model (timeout safeguards)"
        if ! curl -sS -w "\n%{http_code}\n" --connect-timeout 10 --max-time 45 \
          https://models.github.ai/inference/chat/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          --data @req.json -o resp.body > resp.meta; then
          echo "[model] Curl request failed"
          exit 1
        fi
        status=$(tail -n1 resp.meta)
        if [ "$status" != "200" ]; then
          echo "[model] Non-200 status: $status"
          echo "[model] Response:"
          sed -n '1,200p' resp.body
          echo "chars=0" >> "$GITHUB_OUTPUT"
          printf "Automated summary unavailable (HTTP %s). Please review the diff." "$status" > COMMENT.md
          exit 0
        fi
        summary=$(jq -r '.choices[0].message.content // empty' resp.body || true)
        if [ -z "$summary" ]; then
          echo "[model] Empty model content; using fallback."
          summary="Automated summary unavailable. Please review the latest commit diff for the Kubebuilder update."
        fi
        printf "%s\n" "$summary" > COMMENT.md
        echo "[model] Summary chars: $(wc -c < COMMENT.md)"
        echo "chars=$(wc -c < COMMENT.md)" >> "$GITHUB_OUTPUT"

    - name: Post comment to issue
      if: steps.find-issue.outputs.issue_number != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        issue=${{ steps.find-issue.outputs.issue_number }}
        if [ -z "$issue" ]; then
          echo "[comment] No issue number; skipping."
          exit 0
        fi
        echo "[comment] Posting to issue #$issue"
        gh api repos/${{ github.repository }}/issues/$issue/comments -f body=@COMMENT.md
